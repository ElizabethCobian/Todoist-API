{
	"info": {
		"_postman_id": "8b141186-c0a5-4455-9a12-86edcb3f02d6",
		"name": "Todoist-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PROJECT",
			"item": [
				{
					"name": "HP Projects",
					"item": [
						{
							"name": "Get All Projects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Getting all the projects ",
											"pm.test(\"Getting all the projects\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Validate if the schema contains name and id",
											"pm.test(\"Validate Schema\", function(){",
											"    const expectedSchema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"numeric\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            }",
											"        }, ",
											"    };",
											"    pm.response.to.have.jsonBody(expectedSchema);",
											"})",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseProjectURL}}",
									"host": [
										"{{baseProjectURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()",
											"var name = pm.environment.get(\"projectName\");",
											"",
											"// Validate if the project was created with a 200",
											"pm.test(\"The project was succesully created\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate if the project name is correct ",
											"pm.test(\"The project name is correct\", function () {",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"projectName\"));",
											"});",
											"",
											"//Saving my project ID in a variable",
											"pm.environment.set(\"projectId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "e7e05d2598abee64cc6013791167c333748f14e6",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "$(uuidgen)",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"name\": \"{{projectName}}\" \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseProjectURL}}",
									"host": [
										"{{baseProjectURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a Project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json()",
											"const id = pm.environment.get(\"projectId\");",
											"",
											"//Validate if the schema contains name and id",
											"pm.test(\"Validate Schema\", function(){",
											"    const expectedSchema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"numeric\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            }",
											"        }, ",
											"    };",
											"    pm.response.to.have.jsonBody(expectedSchema);",
											"})",
											"",
											"// Validate if the project name is correct ",
											"pm.test(\"The project ID is correct\", function () {",
											"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"projectId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseProjectURL}}/{{projectId}}",
									"host": [
										"{{baseProjectURL}}"
									],
									"path": [
										"{{projectId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate if the project was created with a 200",
											"pm.test(\"The project was succesully created\", function () {",
											"    pm.response.to.have.success; ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "e7e05d2598abee64cc6013791167c333748f14e6",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "$(uuidgen)",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Bootcamp Updated\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseProjectURL}}/{{projectId}}",
									"host": [
										"{{baseProjectURL}}"
									],
									"path": [
										"{{projectId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the project was deleted",
											"pm.test(\"The project was successfully deleted\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "e7e05d2598abee64cc6013791167c333748f14e6",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Request-Id",
										"value": "$(uuidgen)",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseProjectURL}}/{{projectId}}",
									"host": [
										"{{baseProjectURL}}"
									],
									"path": [
										"{{projectId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//Checking the reponse time less than 500ms",
							"pm.test(\"Response time is less than 700ms\", function () {",
							"   pm.expect(pm.response.responseTime).to.be.below(700);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "TASK",
			"item": [
				{
					"name": "HP Task",
					"item": [
						{
							"name": "Get Active Tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate if the project was created with a 200",
											"pm.test(\"The response was correct\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseTaskURL}}",
									"host": [
										"{{baseTaskURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a New Task",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"projectTask\", 2270522905)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()",
											"",
											"// Validate if the project was created with a 200",
											"pm.test(\"The project was succesully created\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Validate if the task was added to My project",
											"pm.test(\"The task was added to the correct project\", function () {",
											"    pm.expect(jsonData.project_id).to.eql(pm.environment.get(\"projectTask\"));",
											"});",
											"",
											"//Saving my task ID in a variable",
											"pm.environment.set(\"taskID\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"My task\", \n    \"due_string\": \"tomorrow at 12:00\",\n    \"due_lang\": \"en\", \n    \"priority\": 4,\n    \"project_id\": 2270522905\n}"
								},
								"url": {
									"raw": "{{baseTaskURL}}",
									"host": [
										"{{baseTaskURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an Active Tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate if the project was created with a 200",
											"pm.test(\"The project was succesully created\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Validate if the schema contains project_id and id",
											"pm.test(\"Validate Schema\", function(){",
											"    const expectedSchema = {",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"numeric\"",
											"            },",
											"            \"project_id\": {",
											"                \"type\": \"numeric\"",
											"            }",
											"        }, ",
											"    };",
											"    pm.response.to.have.jsonBody(expectedSchema);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseTaskURL}}/{{taskID}}",
									"host": [
										"{{baseTaskURL}}"
									],
									"path": [
										"{{taskID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Task",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the updte was correct",
											"pm.test(\"Status code is 2xx\", function () {",
											"    pm.response.to.be.success;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Task Updated\",\n    \"description\": \"I'm adding description\"\n}"
								},
								"url": {
									"raw": "{{baseTaskURL}}/{{taskID}}",
									"host": [
										"{{baseTaskURL}}"
									],
									"path": [
										"{{taskID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close a Task",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the updte was correct",
											"pm.test(\"Status code is 2xx\", function () {",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseTaskURL}}/{{taskID}}/close",
									"host": [
										"{{baseTaskURL}}"
									],
									"path": [
										"{{taskID}}",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reopen Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the updte was correct",
											"pm.test(\"Status code is 2xx\", function () {",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseTaskURL}}/{{taskID}}/reopen",
									"host": [
										"{{baseTaskURL}}"
									],
									"path": [
										"{{taskID}}",
										"reopen"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the updte was correct",
											"pm.test(\"Status code is 2xx\", function () {",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseTaskURL}}/{{taskID}}",
									"host": [
										"{{baseTaskURL}}"
									],
									"path": [
										"{{taskID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//Checking the reponse time less than 500ms",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"   pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}